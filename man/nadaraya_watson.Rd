% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{nadaraya_watson}
\alias{nadaraya_watson}
\title{Nadaraya-Watson Nonparametric Regression Estimator}
\usage{
nadaraya_watson(x, y, x_eval, bandwidth, n_boot = 0L, conf_level = 0.95)
}
\arguments{
\item{x}{A numeric vector of predictor values.}

\item{y}{A numeric vector of response values, must be the same length as \code{x}.}

\item{x_eval}{A numeric vector of points at which to evaluate the regression function.}

\item{bandwidth}{A positive numeric value specifying the bandwidth for the Gaussian kernel.}

\item{n_boot}{An integer indicating the number of bootstrap samples to use for
confidence interval estimation. Default is \code{0}, meaning no bootstrapping.}

\item{conf_level}{A numeric value between \code{0} and \code{1} specifying the
confidence level for the confidence intervals. Default is \code{0.95}.}
}
\value{
A list with the following components:

A list with the following components:
\code{y_pred}: A numeric vector of the predicted values at each point in \code{x_eval}.
\code{lower} (optional): A numeric vector of the lower bounds of the confidence intervals for each point in \code{x_eval} if \code{n_boot > 0}.
\code{upper} (optional): A numeric vector of the upper bounds of the confidence intervals for each point in \code{x_eval} if \code{n_boot > 0}.
}
\description{
This function implements the Nadaraya-Watson estimator for nonparametric regression using
a Gaussian kernel. It optionally supports bootstrapping to calculate confidence intervals.
}
\details{
The Nadaraya-Watson estimator is a kernel-based nonparametric regression estimator that
provides a smoothed estimate of the conditional mean of \code{y} given \code{x}.
This implementation uses a Gaussian kernel with fixed bandwidth.
}
\examples{
set.seed(42)
x <- sort(runif(100, 0, 10))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot = 100, conf_level = 0.95)
plot(x, y)
lines(x_eval, results$y_pred, col = "blue")
if (!is.null(results$lower)) {
  lines(x_eval, results$lower, col = "blue", lty = 2)
  lines(x_eval, results$upper, col = "blue", lty = 2)
}

}
