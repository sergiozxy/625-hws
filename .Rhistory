if (i <= n_left) {
merged <- c(merged, left[i:n_left])
}
if (j <= n_right) {
merged <- c(merged, right[j:n_right])
}
return(list(merged = merged, swaps = swaps))
}
# Recursive Merge Sort function to sort and count swaps (inversions)
merge_sort_and_count_swaps <- function(arr) {
n <- length(arr)
if (n <= 1) {
return(list(sorted = arr, swaps = 0))
}
mid <- floor(n / 2)
left_result <- merge_sort_and_count_swaps(arr[1:mid])
right_result <- merge_sort_and_count_swaps(arr[(mid + 1):n])
merged_result <- merge_and_count_swaps(left_result$sorted, right_result$sorted)
total_swaps <- left_result$swaps + right_result$swaps + merged_result$swaps
return(list(sorted = merged_result$merged, swaps = total_swaps))
}
# Function to compute Kendall's Tau using Merge Sort for counting swaps
kendall_tau_sorted <- function(x, y) {
n <- length(x)
# Sort x and apply the same permutation to y
ord <- order(x)
y_sorted <- y[ord]
# Use merge sort to count the swaps in y_sorted
result <- merge_sort_and_count_swaps(y_sorted)
# Compute tau using the swap count
swaps <- result$swaps
tau <- 1 - (2 * swaps / (n * (n - 1) / 2))
return(tau)
}
# Main function to compute maximum Kendall's Tau across all rows
matrix_kendall <- function(X) {
m <- nrow(X)
n <- ncol(X)
y <- 1:n  # Sequence y = (1, 2, ..., n)
max_tau <- -Inf
for (i in 1:m) {
current_tau <- kendall_tau_sorted(X[i, ], y)
if (current_tau > max_tau) {
max_tau <- current_tau
}
}
return(max_tau)
}
matrix_kendall( matrix ( c (1 , 2 , 2 , 1) , 2 , 2))
matrix_kendall ( matrix ( c (2 , 2 , 1 , 1) , 2 , 2))
# Measure the running time using system.time
start_time <- Sys.time()
result <- matrix_kendall(X)
end_time <- Sys.time()
# Calculate the time taken in seconds
time_taken <- end_time - start_time
# Print the result and time taken
print(result)
print(paste("Time taken: ", time_taken, " seconds"))
help("data.frame")
x <- 0.54
print(x)
print(.45)
print(84 213)
x <- 984x
x <- 1+2i
print(x)
x <- 90L
print(x)
x <- as.raw(50)
print(x)
x <- 1 + 2i
x <- 1+3i
print(x)
x <- 1 + 2i
print(x)
x <- 0+2i
print(x)
x<-2i
print(x)
x<-0-2i
print(x)
help(outer)
help(combn)
exit
help(dist)
help(all)
help(data.table)
help(table)
help(which)
exists()
setwd("Desktop/2024 fall/BIOSTAT-625/homeworks/HW3/nadarayaWatson/")
usethis::create_package("Desktop/2024 fall/BIOSTAT-625/homeworks/HW3/nadarayaWatson")
exit
q()
usethis::use_gpl3_license()
usethis::use_rcpp()
usethis::use_rcpp("nadaraya_watson")
usethis::use_package_doc()
devtools::document()
devtools::document()
?nadaraya_watson
devtools::document()
?nadaraya_watson
usethis::use_test("test_cases")
usethis::use_test("cases")
testthat:test_file("tests/testthat/test-cases.R")
testthat::test_file("tests/testthat/test-cases.R")
nadaraya_data <- data.frame(
x = x,
y = y,
x_eval = x_eval
)
set.seed(42)
x <- sort(seq(0, 10, length.out = 100))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
nadaraya_data <- data.frame(
x = x,
y = y,
x_eval = x_eval
)
usethis::use_data(nadaraya_data, overwrite = TRUE)
devtools::document()
usethis::use_r("nadaraya_data")
devtools::document()
testthat:test_file("tests/testthat/test-cases.R")
testthat::test_file("tests/testthat/test-cases.R")
devtools::document()
devtools::document()
testthat::test_file("tests/testthat/test-cases.R")
testthat::test_file("tests/testthat/test-cases.R")
?nadaraya_watson
devtools::document()
?nadaraya_watson
usethis::use_test("should-wrong")
testthat::test_file("tests/testthat/test-should-wrong.R")
testthat::test_file("tests/testthat/test-should-wrong.R")
testthat::test_file("tests/testthat/test-should-wrong.R")
testthat::test_file("tests/testthat/test-should-wrong.R")
testthat::test_file("tests/testthat/test-should-wrong.R")
?nadaraya_data
usethis::use_vignette("summary_nadaraya")
devtools::document()
devtools::document()
getwd()
devtools::document()
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::install(build_vignettes = FALSE)
devtools::build(build_vignettes = TRUE)
getwd()
devtools::build()
devtools::build()
devtools::build()
usethis::use_r("nadaraya_watson_r")
usethis::use_test("compare-r-cpp")
devtools::document()
?nadaraya_watson_r
devtools::load_all(".")
testthat::test_file("test-compare-r-cpp")
testthat::test_file("test-compare-r-cpp.R")
testthat::test_file("test/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
# Generate example data
set.seed(42)
x <- sort(seq(0, 10, length.out = 100))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
# Predict with bootstrapping for confidence intervals
results <- nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot = 500, conf_level = 0.95)
# Extract the results
y_pred <- results$y_pred
lower <- results$lower
upper <- results$upper
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression with Confidence Intervals", xlab = "x", ylab = "y")
lines(x_eval, y_pred, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower, col = "blue", lty = 2)
lines(x_eval, upper, col = "blue", lty = 2)
legend("topright", legend = c("Estimate", "Confidence Interval"), col = c("blue", "blue"), lty = c(1, 2), lwd = 2)
# Generate example data
set.seed(42)
x <- sort(seq(0, 10, length.out = 100))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
# Predict with bootstrapping for confidence intervals
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot = 500, conf_level = 0.95)
# Extract the results
y_pred <- results$y_pred
lower <- results$lower
upper <- results$upper
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression with Confidence Intervals", xlab = "x", ylab = "y")
lines(x_eval, y_pred, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower, col = "blue", lty = 2)
lines(x_eval, upper, col = "blue", lty = 2)
legend("topright", legend = c("Estimate", "Confidence Interval"), col = c("blue", "blue"), lty = c(1, 2), lwd = 2)
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
# Generate example data
set.seed(42)
x <- sort(runif(100, 0, 10))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
# Predict with bootstrapping for confidence intervals
results <- nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot = 500, conf_level = 0.95)
# Extract the results
y_pred <- results$y_pred
lower <- results$lower
upper <- results$upper
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression with Confidence Intervals", xlab = "x", ylab = "y")
lines(x_eval, y_pred, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower, col = "blue", lty = 2)
lines(x_eval, upper, col = "blue", lty = 2)
legend("topright", legend = c("Estimate", "Confidence Interval"), col = c("blue", "blue"), lty = c(1, 2), lwd = 2)
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
testthat::test_file("tests/testthat/test-compare-r-cpp.R")
devtools::document()
library(microbenchmark)
# Define test inputs
set.seed(42)
x <- sort(runif(100, 0, 10))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
n_boot <- 50
conf_level <- 0.95
# Benchmark the R and C++ implementations
benchmark_results <- microbenchmark(
R_version = nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot, conf_level),
Cpp_version = nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level),
times = 10  # Run each function 10 times for a robust comparison
)
# Print benchmark results
print(benchmark_results)
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::load_all()
devtools::install(build_vignettes = TRUE)
devtools::check()
library(nadarayaWatson)
library(np)
library(microbenchmark)
# Generate example data
set.seed(42)
x <- sort(seq(0, 10, length.out = 100))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
# Predict with bootstrapping for confidence intervals
results <- nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot = 500, conf_level = 0.95)
# Define test inputs
set.seed(42)
x <- sort(runif(100, 0, 10))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
n_boot <- 50
conf_level <- 0.95
# Benchmark the R and C++ implementations
benchmark_results <- microbenchmark(
R_version = nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot, conf_level),
Cpp_version = nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level),
times = 10  # Run each function 10 times for a robust comparison
)
# Print benchmark results
print(benchmark_results)
# Visualize results
boxplot(benchmark_results, log = "y", main = "Running Time Comparison between R and C++ Implementations",
ylab = "Execution Time (log scale, microseconds)")
# Generate example data
set.seed(42)
x <- sort(seq(0, 10, length.out = 100))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with bootstrapping for confidence intervals
results <- nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
# Extract the results
y_pred <- results$y_pred
lower <- results$lower
upper <- results$upper
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression with Confidence Intervals", xlab = "x", ylab = "y")
lines(x_eval, y_pred, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower, col = "blue", lty = 2)
lines(x_eval, upper, col = "blue", lty = 2)
legend("topright", legend = c("Estimate", "Confidence Interval"), col = c("blue", "blue"), lty = c(1, 2), lwd = 2)
# Generate example data
set.seed(42)
x <- sort(seq(0, 10, length.out = 100))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with bootstrapping for confidence intervals
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
# Extract the results
y_pred <- results$y_pred
lower <- results$lower
upper <- results$upper
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression with Confidence Intervals", xlab = "x", ylab = "y")
lines(x_eval, y_pred, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower, col = "blue", lty = 2)
lines(x_eval, upper, col = "blue", lty = 2)
legend("topright", legend = c("Estimate", "Confidence Interval"), col = c("blue", "blue"), lty = c(1, 2), lwd = 2)
# Generate example data
set.seed(42)
x <- sort(seq(0, 10, length.out = 100))
y <- cos(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with bootstrapping for confidence intervals
results <- nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
# Extract the results
y_pred <- results$y_pred
lower <- results$lower
upper <- results$upper
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression with Confidence Intervals", xlab = "x", ylab = "y")
lines(x_eval, y_pred, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower, col = "blue", lty = 2)
lines(x_eval, upper, col = "blue", lty = 2)
legend("topright", legend = c("Estimate", "Confidence Interval"), col = c("blue", "blue"), lty = c(1, 2), lwd = 2)
# Generate example data
set.seed(42)
x <- sort(runif(100, 0, 10))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
# Predict with Rcpp implementation
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot = 500, conf_level = 0.95)
y_pred_cpp <- results$y_pred
lower_cpp <- results$lower
upper_cpp <- results$upper
# Predict with the np package (R implementation)
np_model <- npreg(bws = bandwidth, xdat = x, ydat = y, exdat = x_eval,
ckertype = "gaussian")
y_pred_np <- predict(np_model)
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression Comparison", xlab = "x", ylab = "y")
lines(x_eval, y_pred_cpp, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower_cpp, col = "blue", lty = 2)
lines(x_eval, upper_cpp, col = "blue", lty = 2)
lines(x_eval, y_pred_np, col = "red", lwd = 2, lty = 1)
legend("topright", legend = c("Rcpp Estimate", "Rcpp Confidence Interval", "np Package Estimate"),
col = c("blue", "blue", "red"), lty = c(1, 2, 1), lwd = c(2, 1, 2))
# Generate example data
set.seed(42)
x <- sort(runif(100, 0, 3))
y <- exp(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 3, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with Rcpp implementation
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
y_pred_cpp <- results$y_pred
lower_cpp <- results$lower
upper_cpp <- results$upper
# Predict with the np package (R implementation)
np_model <- npreg(bws = bandwidth, xdat = x, ydat = y, exdat = x_eval,
ckertype = "gaussian")
y_pred_np <- predict(np_model)
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression Comparison", xlab = "x", ylab = "y")
lines(x_eval, y_pred_cpp, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower_cpp, col = "blue", lty = 2)
lines(x_eval, upper_cpp, col = "blue", lty = 2)
lines(x_eval, y_pred_np, col = "red", lwd = 2, lty = 1)
legend("topright", legend = c("Rcpp Estimate", "Rcpp Confidence Interval", "np Package Estimate"),
col = c("blue", "blue", "red"), lty = c(1, 2, 1), lwd = c(2, 1, 2))
# Generate example data
set.seed(42)
x <- sort(runif(100, 0, 3))
y <- exp(x) + cos(x) + sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 3, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with Rcpp implementation
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
y_pred_cpp <- results$y_pred
lower_cpp <- results$lower
upper_cpp <- results$upper
# Predict with the np package (R implementation)
np_model <- npreg(bws = bandwidth, xdat = x, ydat = y, exdat = x_eval,
ckertype = "gaussian")
y_pred_np <- predict(np_model)
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression Comparison", xlab = "x", ylab = "y")
lines(x_eval, y_pred_cpp, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower_cpp, col = "blue", lty = 2)
lines(x_eval, upper_cpp, col = "blue", lty = 2)
lines(x_eval, y_pred_np, col = "red", lwd = 2, lty = 1)
legend("topright", legend = c("Rcpp Estimate", "Rcpp Confidence Interval", "np Package Estimate"),
col = c("blue", "blue", "red"), lty = c(1, 2, 1), lwd = c(2, 1, 2))
# Generate example data
set.seed(42)
x <- sort(runif(100, 0, 3))
y <- cos(x) + sin(x) + x * x + rnorm(100, sd = 0.2)
x_eval <- seq(0, 3, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with Rcpp implementation
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
y_pred_cpp <- results$y_pred
lower_cpp <- results$lower
upper_cpp <- results$upper
# Predict with the np package (R implementation)
np_model <- npreg(bws = bandwidth, xdat = x, ydat = y, exdat = x_eval,
ckertype = "gaussian")
y_pred_np <- predict(np_model)
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression Comparison", xlab = "x", ylab = "y")
lines(x_eval, y_pred_cpp, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower_cpp, col = "blue", lty = 2)
lines(x_eval, upper_cpp, col = "blue", lty = 2)
lines(x_eval, y_pred_np, col = "red", lwd = 2, lty = 1)
legend("topright", legend = c("Rcpp Estimate", "Rcpp Confidence Interval", "np Package Estimate"),
col = c("blue", "blue", "red"), lty = c(1, 2, 1), lwd = c(2, 1, 2))
# Generate example data
set.seed(42)
x <- sort(runif(100, 0, 3))
y <- cos(x) + sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 3, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with Rcpp implementation
results <- nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
y_pred_cpp <- results$y_pred
lower_cpp <- results$lower
upper_cpp <- results$upper
# Predict with the np package (R implementation)
np_model <- npreg(bws = bandwidth, xdat = x, ydat = y, exdat = x_eval,
ckertype = "gaussian")
y_pred_np <- predict(np_model)
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression Comparison", xlab = "x", ylab = "y")
lines(x_eval, y_pred_cpp, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower_cpp, col = "blue", lty = 2)
lines(x_eval, upper_cpp, col = "blue", lty = 2)
lines(x_eval, y_pred_np, col = "red", lwd = 2, lty = 1)
legend("topright", legend = c("Rcpp Estimate", "Rcpp Confidence Interval", "np Package Estimate"),
col = c("blue", "blue", "red"), lty = c(1, 2, 1), lwd = c(2, 1, 2))
# Generate example data
set.seed(42)
x <- sort(runif(100, 0, 3))
y <- cos(x) + sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 3, length.out = 100)
bandwidth <- 0.5
n_boot <- 500
# Predict with Rcpp implementation
results <- nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot, conf_level = 0.95)
y_pred_cpp <- results$y_pred
lower_cpp <- results$lower
upper_cpp <- results$upper
# Predict with the np package (R implementation)
np_model <- npreg(bws = bandwidth, xdat = x, ydat = y, exdat = x_eval,
ckertype = "gaussian")
y_pred_np <- predict(np_model)
# Plot the results with confidence intervals
plot(x, y, main = "Nonparametric Regression Comparison", xlab = "x", ylab = "y")
lines(x_eval, y_pred_cpp, col = "blue", lwd = 2, lty = 1)
lines(x_eval, lower_cpp, col = "blue", lty = 2)
lines(x_eval, upper_cpp, col = "blue", lty = 2)
lines(x_eval, y_pred_np, col = "red", lwd = 2, lty = 1)
legend("topright", legend = c("Rcpp Estimate", "Rcpp Confidence Interval", "np Package Estimate"),
col = c("blue", "blue", "red"), lty = c(1, 2, 1), lwd = c(2, 1, 2))
devtools::check()
.Last.error
devtools::load_all()
devtools::install(build_vignettes = TRUE)
# Define test inputs
set.seed(42)
x <- sort(runif(100, 0, 10))
y <- sin(x) + rnorm(100, sd = 0.2)
x_eval <- seq(0, 10, length.out = 100)
bandwidth <- 0.5
n_boot <- 50
conf_level <- 0.95
# Benchmark the R and C++ implementations
benchmark_results <- microbenchmark(
R_version = nadaraya_watson_r(x, y, x_eval, bandwidth, n_boot, conf_level),
Cpp_version = nadaraya_watson(x, y, x_eval, bandwidth, n_boot, conf_level),
times = 10  # Run each function 10 times for a robust comparison
)
# Print benchmark results
print(benchmark_results)
devtools::load_all()
devtools::install(build_vignettes = TRUE)
